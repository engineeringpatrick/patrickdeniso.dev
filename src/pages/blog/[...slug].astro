---
import type { CollectionEntry } from "astro:content";
import { getCollection } from "astro:content";
import PostButton from "../../components/Posts/PostButton.astro";
import { categories, type Category } from "../../content/config";
import BlogLayout from "../../layouts/BlogLayout.astro";

interface Props {
    entry?: CollectionEntry<Category>;
}

export async function getStaticPaths() {
    const fullCategories = new Set<string | undefined>([undefined, ...Object.keys(categories)]);
    
    const postPaths = await Promise.all(Object.keys(categories).map(async category => {
        const entries = await getCollection(category as Category);

        return entries.map(entry => {
            fullCategories.add(entry.data.category);

            return { params: { slug: entry.collection + '/' + entry.slug }, props: { entry } };
        });
    }));
    const categoryPaths = Array.from(fullCategories).map(category => ({ params: { slug: category } }));

    console.log(categoryPaths);
    return [...postPaths.flat(), ...categoryPaths];
}

const blogEntry = await Astro.props.entry?.render();

const urlCategory = Astro.params.slug?.split('/')[0];
let posts = urlCategory ? await getCollection(urlCategory as Category, ({ data }) => (data.category === Astro.params.slug)) : [];

posts = posts.sort((a, b) => {
  const getLastSegment = (id: string) =>
    id.split("/").pop()?.replace(/\.m$/, "") ?? "";

  return getLastSegment(a.id).localeCompare(getLastSegment(b.id), undefined, {
    numeric: true,
    sensitivity: "base",
  });
});
---

<BlogLayout>
  <div class="col-span-3 space-y-8">
    {
        blogEntry ? 
          <p>{<blogEntry.Content/>}</p>
        :
          posts.map((post) => (
            <PostButton title={post.data.title} description={post.data.description} href={"/blog/notes/" + post.slug}/>
          ))
    }
  </div>
</BlogLayout>